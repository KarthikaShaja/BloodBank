/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-12-04 18:16:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Blood;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import blood.dto.*;
import blood.bl.*;
import blood.dl.*;
import blood.utlity.ReceiverIdGenerate;

public final class receiver_005fadd_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


     String patient_id,patient_name,blood_grp,gender,hos_name,hos_pat_id;
     long phone;
	 ReceiverDTO receiver = null;
	 ReceiverFormDTO receiver1=null;
	 int result,status;


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("blood.dl");
    _jspx_imports_packages.add("blood.bl");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("blood.dto");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("blood.utlity.ReceiverIdGenerate");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	try
	{
	
		
	    patient_id = ReceiverIdGenerate.generateRECId();
	    patient_name= request.getParameter("txtPatientName");;  
		blood_grp = request.getParameter("txtBloodGrp");;
		gender= request.getParameter("txtGender");;
		hos_name = request.getParameter("txtHosName");
		hos_pat_id = request.getParameter("txtHosPatID");
		phone = Long.parseLong(request.getParameter("txtPhone"));

		receiver = new ReceiverDTO();
		receiver.setPatient_id(patient_id);
		receiver.setPatient_name(patient_name);
		receiver.setBlood_grp(blood_grp);
		receiver.setGender(gender);
		receiver.setHos_name(hos_name);
		receiver.setHos_pat_id(hos_pat_id);
		receiver.setPhone(phone);
		result = ReceiverBL.addReceiver(receiver);
		
		receiver1 = new ReceiverFormDTO();
		receiver1.setPatient_id(patient_id);
		receiver1.setPatient_name(patient_name);
		receiver1.setBlood_grp(blood_grp);
		receiver1.setGender(gender);
		receiver1.setHos_name(hos_name);
		receiver1.setHos_pat_id(hos_pat_id);
		receiver1.setPhone(phone);
		status = ReceiverFormBL.addReceiver(receiver1);
		
		if(result>0)
		{
			session.setAttribute("message","Receiver details added successfully");
		}
		else
		{
			session.setAttribute("message","Please try again later");
		}
		response.sendRedirect("receiver_view_all.jsp");
		}

	catch(Exception e)
	{
		System.out.println("**Error**: Receiver: receiver_add_process"+e.getMessage());
		response.sendRedirect("receiver_add.jsp");
	}
	
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
